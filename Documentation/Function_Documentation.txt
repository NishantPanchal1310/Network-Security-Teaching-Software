
Deliverables

    Software fully documented and written in Python 3.
    Technical documentation, including installation instructions, libraries used,  and UML class diagrams.
    Details about what testing was done and what data was used.
    Your group will be required to deliver a 10 minute demonstration of your software, its functionality and how you can use it to perform the given tasks.
    
Week 1 (Aug 24th): Develop a program to read text from the terminal and a file, to hash this text and store the hash as a hexadecimal in a file.

Implementing RSA:
https://pypi.org/project/rsa/ 

Clear Terminal Function
    Description:
        Clear all prints on the terminal.
    Syntax:
        clearTerminal()

Loading Animation Function:
    Description:
        Creates a loading anmation in the terminal.
    Syntax: 
        loadingAnimation(reduntant text, number of animation loops, animation text)
        - Reduntant text is text while will stay on screen.
            - Has to be a string.
            - For multiline support add \n in string where a new line is wanted to be created.
        - Number of animation loops is the number of times the animations repeat. Remember, the more loops, the longer the animation.
            - Has to be a integer
        - The animation text is the text after the which the dot animation plays
            - Has to be a string
            - Can be a variable while contains a string

Hashing Function:
    Description:
        Hashes text using the sha3-512 algorithm.
    Syntax:
        var = hashText(text)
        - Text is the input text that needs to be hashed.
            - Has to be a string.
            - Variables are accepted as long as they contain a string.
        - Has to equal a variable as it returns an output

Menu Function:
    Description:
        Print a menu and allow user select an option
    Syntax:
        var = menuFunction(menu title, [optionA, optionb, etc...])
        - The function must equal a variable as it return a option value.
        - Menu title is the title of the menu.
            - Enter None for no title
            - Must be string.
            - Can be variable which contain a string.
        - An list of option must be entered, even if it is just one value.
            - The list must only contain strings.
        - When the user wishes to exit and they enter 99, exit as a string is returned.
            
Read File Pickle:
    Description:
        tries to take a pickle file of a specified name and read the contents
        It will return the message within the pickle file, unless the files does not exist.
    Syntax:
        readFile(filename)
        - The filename is required for the function to go retrieve the file.
        - has to be string.
        - variables that are not string are converted to string anyway.
        
Save file Pickle:
    Description:
        Takes a given text and adds it to a given pickle file specified by filename.
     Syntax: 
        saveFile(text, filename)
        - filename be given as string.
        - text is given as any python variable type
        

RSA_encode:
    Description:
        takes a message to encode, the e value of a public key, the n value of the public and private keys and returns it in the form of hexadecimal.
     syntax: 
         RSA_encode(message, e, n)
        - message in string
        - e and n need to be str and in base 16.
     
     
RSA_decode:
    Description:
        takes a ciphered message, d and n of the private key, and then deciphers the message using the RSA algorithm and returns it as string
     syntax: 
        RSA_decode(cipher, d, n)
        - cipher needs to be in str, in base 16 (preferably use an encoded cipher from RSA_encode function).
        - d and n need to be str and in base 16.
        
        
##Experimental: still looking for method to implement rsa outside of installing it through cmd.

gen_key:
    Description:
        using installed module rsa, generates a public (e,n) and private (d,n) key in 128 bit and returns it as string of hexadecimal 
        (Future development: give a list where keys = [e, d, n]. Right now: experimentally given as string of hexadecimal outputs)
    syntax:
        No input required.
        returns a string labeling which keys are which [in hexadecimal]
        Possibly implement as method or interdependence of Student() class.

     
 
 
        
                
