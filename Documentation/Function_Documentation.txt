REQUIREMENTS
    Software fully documented and written in Python 3.
    Technical documentation, including installation instructions, libraries used,  and UML class diagrams.
    Details about what testing was done and what data was used.
    Your group will be required to deliver a 10 minute demonstration of your software, its functionality and how you can use it to perform the given tasks.
    
UML diagram link: https://app.lucidchart.com/invitations/accept/7422757d-e4bc-4461-b8fd-8a419c156ca8

Implementing RSA:
https://pypi.org/project/rsa/ 

#######               FUNCTIONS             ###############################
Clear Terminal Function
    Description:
        Clear all prints on the terminal.
    Syntax:
        clearTerminal()

Loading Animation Function:
    Description:
        Creates a loading anmation in the terminal.
    Syntax: 
        loadingAnimation(reduntant text, number of animation loops, animation text)
        - Reduntant text is text while will stay on screen.
            - Has to be a string.
            - For multiline support add \n in string where a new line is wanted to be created.
        - Number of animation loops is the number of times the animations repeat. Remember, the more loops, the longer the animation.
            - Has to be a integer
        - The animation text is the text after the which the dot animation plays
            - Has to be a string
            - Can be a variable while contains a string

Hashing Function:
    Description:
        Hashes text using the sha3-512 algorithm.
    Syntax:
        var = hashText(text)
        - Text is the input text that needs to be hashed.
            - Has to be a string.
            - Variables are accepted as long as they contain a string.
        - Has to equal a variable as it returns an output

Menu Function:
    Description:
        Print a menu and allow user select an option
    Syntax:
        var = menuFunction(menu title, [optionA, optionb, etc...])
        - The function must equal a variable as it return a option value.
        - Menu title is the title of the menu.
            - Enter None for no title
            - Must be string.
            - Can be variable which contain a string.
        - An list of option must be entered, even if it is just one value.
            - The list must only contain strings.
        - When the user wishes to exit and they enter 99, exit as a string is returned.
            
Read File Pickle:
    Description:
        tries to take a pickle file of a specified name and read the contents
        It will return the message within the pickle file, unless the files does not exist.
    Syntax:
        readFile(filename)
        - The filename is required for the function to go retrieve the file.
        - has to be string.
        - variables that are not string are converted to string anyway.
        
Save file Pickle:
    Description:
        Takes a given text and adds it to a given pickle file specified by filename.
     Syntax: 
        saveFile(text, filename)
        - filename be given as string.
        - text is given as any python variable type
        

RSA_encode:
    Description:
        takes a message to encode, the e value of a public key, the n value of the public and private 
        keys and returns it in the form of hexadecimal.
     syntax: 
         RSA_encode(message, e, n)
        - message in string
        - e and n need to be str and in base 10.
     
     
RSA_decode:
    Description:
        takes a ciphered message, d and n of the private key, and then deciphers the message using the 
        RSA algorithm and returns it as string
     syntax: 
        RSA_decode(cipher, d, n)
        - cipher needs to be in str, in base 16 (preferably use an encoded cipher from RSA_encode 
        function).
        - d and n need to be str and in base 10.
       

Menu Function:
    Description:
        A function to produce an interface which a user can ointeract with. 
        Normally, the user will not interact with this function as it is coded in into the main     interface.  
    syntax: 
        - menuTitle needs to be a string, 
        - optionList needs to be a list,
        - list of Objects needs to be a list of student objects instantiated from student class.
        
importFile function:
    description: 
        A function that takes txt files, opens them, reads them (as a list) and then closes the file
        The content within the file is returned as a list. 
    syntax: 
        -  user input
        - must be given as a str
        - the name of the file must be given as the name excluding txt, for example. "test" and not 
        "test.txt".
        
new_student function:
    description:
        It is a function which creates a new student class and assigns the attributes. To be used in 
        the main interface.
    syntax:
        -   name, e, d and n are given as str but e, d, and n are stored as int.
        
open_student_database:
    Description:
        It will oben a file called "StudentData" containing all of the student objects. 
        it will then read the contents and return it as a list.
    syntax:
        - No input is required for the function.

save_student_database:
    Description:
        Once changes have been made to the list of objects with student objects, this is considered
        the database and is saved back into the StudentData pickle file.
    Syntax:
     -listOfObjects must be the list that stores all of teh student objects.
 
 search_by_name:
    Description:
        This will be used to search for a student in the listOfObjects
        It is done by looking for a desired name attribute of every object in the list
        Quite inefficient and could possibly change over to a dictionary if needed.
    syntax: 
        - name must be given as a string, exactly as the name of the student object which was 
        instantiated.
        -listOfObjects is the temporary database of all the student objects when the interface is run.
        
        
##### KEY GENERATION FOR RSA #########################################################

###Backup/unused:###
gen_key:
    Description:
        using installed module rsa, generates a public (e,n) and private (d,n) key in 128 bit and returns it as string of hexadecimal 
        (Future development: give a list where keys = [e, d, n]. Right now: experimentally given as string of hexadecimal outputs)
    syntax:
        No input required.
        returns a string labeling which keys are which [in hexadecimal]
        Possibly implement as method or interdependence of Student() class.
#################     
        
gen_prime function:
    Description:
        A function that generates a list of prime numbers.
        It then saves a list of the prime numbers generated to a file named as 
        primes_<number of bits>bits, which is to be used when generating RSA keys.
    syntax: 
        - bits is to be given as an integer in base 10. 
        - it determines how many bits the prime numbers will have, by taking 2 to the power of bits 
          subtracting 1 and divded by 2. 2^((bits-1)/2)
        
 generate_key_with_custom_RSA_algorithm:
    Description:
        A function that generates keys manually using the file of prime numbers produced by the  
        gen_prime function. It uses the maths behind the RSA algorithm and applies it and returns
        the e, n and d values.
    Syntax: 
        - bits is given as int, but it will only be used to read the file which the prime numbers 
          are stored in.
        - It will return e, d and n as a tuple.
    
    






########   Classes    ##########

students():
    Description:
        A class which is used to instantiated student objects for storing keys, messages, ect.
    Attributes:
        name: str  pubkey: int(10)   privkey: int(10)  n: int(10)
        name is used to describe which object belongs to a user.
        the other attributes are used for RSA 
    Methods:
        - get_ methods: descriptor that follows get_ denotes the values which are returned.
        - edit_ methods: descriptor that follows edit_ denotes the keys which can be edited. Note that  
            new_key has to be given as an str which is stored as an int in base 10.
